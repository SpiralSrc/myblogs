generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  clerkId         String
  firstName       String
  lastName        String
  email           String    @unique
  avatar          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  posts           Post[]
  comments        Comment[] @relation("Comment")
  replyToComments Comment[] @relation("RepliedToComments")
  likes           Like[]
}

model Post {
  id         String    @id @default(uuid())
  title      String
  slug       String    @unique
  desc       String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
  tags       Tag[]
  comments   Comment[]
  likes      Like[]

  @@map("posts")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  imageUrl  String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]

  @@map("tags")
}

model Comment {
  id          String   @id @default(uuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation("Comment", fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  repliedBy   User?    @relation("RepliedToComments", fields: [repliedById], references: [id], onDelete: Cascade)
  repliedById String?
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  likes       Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}
