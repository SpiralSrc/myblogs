generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique
  firstName String?
  lastName  String?
  email     String    @unique
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  Reply     Reply[]
}

model Post {
  id             String    @id @default(uuid())
  title          String
  slug           String    @unique
  desc           String
  content        String
  isPublished    Boolean?  @default(false)
  view_count     Int       @default(1)
  last_viewed_at DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     String
  user           User      @relation(fields: [userId], references: [clerkId])
  userId         String
  tags           Tag[]
  comments       Comment[]
  likes          Like[]

  @@map("posts")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  imageUrl  String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]

  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
  postSlug  String
  replies   Reply[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
  postSlug  String
}

model Reply {
  id        String  @id @default(uuid())
  text      String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}
